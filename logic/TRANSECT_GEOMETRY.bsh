/***************************** TRANSECT GEOMETREY *****************************/
addOnEvent("Transect/Transect/Start_Survey_Unit",  "click", "startSurveyUnit()");
addOnEvent("Transect/Transect/Finish_Survey_Unit", "click", "finishSurveyUnit()");

STATE_NONE     = "NONE";
STATE_STARTED  = "STARTED";
STATE_FINISHED = "FINISHED";

state = STATE_NONE;

startSurveyUnit() {
  if      (state.equals(STATE_NONE    )) tryIncrementingState();
  else if (state.equals(STATE_STARTED )) showToast("Survey already started");
  else if (state.equals(STATE_FINISHED)) showToast("Survey already finished");
}

finishSurveyUnit() {
  if      (state.equals(STATE_NONE    )) showToast("Survey not yet started");
  else if (state.equals(STATE_STARTED )) tryIncrementingState();
  else if (state.equals(STATE_FINISHED)) showToast("Survey already finished");
}

tryIncrementingState() {
  // Make a chain of callbacks. It should go:
  //
  //             __________-> identifier ->_______________
  //            /                                         \
  //   saveParentTransect(...) -> saveChildTransectPoint(identifier, ...)
  //     -> saveTabGroup(...)
  //
  // The last call should be the original, autogenerated saveTabGroup call from
  // the onShowTransect function definition.

  Object positionProj = getGPSPositionProjected();
  if (positionProj == null) {
    showToast("Unable to get GPS position");
    return;
  }
  saveParentTransect();
}

saveParentTransect() {
  tabGroup               = "Transect";
  saveChildTransectPoint = "saveChildTransectPoint";

  // Already saved
  if (getUuid(tabGroup) != null) {
    uuid = getUuid(tabGroup);
    fetchIdentifier(uuid, saveChildTransectPoint);
    return;
  }

  // Not already saved. Save it immediately then enable autosaving.
  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabGroup, uuid);

      // This should be equivalent to the autogenerated saveTabGroup call from
      // the onShowTransect function definition. This enables autosave after the
      // below saveTabGroup call is complete.
      saveTabGroup(tabGroup);

      fetchIdentifier(uuid, saveChildTransectPoint);
    }
  };
  saveTabGroup(tabGroup, null, null, null, saveCallback);
}

saveChildTransectPoint(String parentId) {
  parentTabGroup = "Transect";
  childTabGroup  = "Transect Point";

  Object positionProj = getGPSPositionProjected();
  String parentUuid   = getUuid(parentTabGroup);

  if (isNull(parentUuid)) {
    // Shouldn't happen because `saveParentTransect` should've set this.
    Log.e("saveChildTransectPoint()", "Parent UUID is null");
    return;
  }
  if (positionProj == null) {
    return;
  }

  lat = positionProj.getLatitude();
  lon = positionProj.getLongitude();
  MapPos pos   = new MapPos(lat, lon);
  Point  point = new Point(pos, null, (PointStyle) null, null);
  List   geoList = new ArrayList(); geoList.add(point);

  String stateNext;
  if      (state.equals(STATE_NONE   )) stateNext = STATE_STARTED;
  else if (state.equals(STATE_STARTED)) stateNext = STATE_FINISHED;
  else {
    // Shouldn't ever happen
    Log.e("saveChildTransectPoint()", "Unexpected state");
    showWarning("Error", "A critial error has occurred. Point not saved.");
    return;
  }

  String order;
  if (stateNext.equals(STATE_STARTED )) order = "0";
  if (stateNext.equals(STATE_FINISHED)) order = "1";

  List attribs = createAttributeList();
  attribs.add(createEntityAttribute("State",     null, null, stateNext, null));
  attribs.add(createEntityAttribute("Parent ID", null, null, parentId,  null));
  attribs.add(createEntityAttribute("Order",     null, null, order,     null));

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      state = stateNext;
      showToast("Survey " + state.toLowerCase());

      String rel = "%s - %s";
      rel = replaceFirst(rel, "%s", parentTabGroup);
      rel = replaceFirst(rel, "%s", childTabGroup);

      saveEntitiesToHierRel(rel, parentUuid, uuid, "Parent Of", "Child Of", "");
    }
  };
  saveArchEnt(null, childTabGroup, geoList, attribs, saveCallback);
}

// Regex-free string replacement functions
replaceFirst(haystack, needle, replacement) {
  i = haystack.indexOf(needle);
  if (i == -1)           return haystack;
  if (needle.equals("")) return haystack;
  pre  = haystack.substring(0, i                                   );
  post = haystack.substring(   i+needle.length(), haystack.length());
  return pre + replacement + post;
}

fetchIdentifier(String uuid, String callback) {
  String q = "";
  q += "SELECT uuid, response ";
  q += "FROM latestnondeletedarchentformattedidentifiers ";
  q += "WHERE uuid = '%s' ";
  q  = replaceFirst(q, "%s", uuid);

  cb = new FetchCallback() {
    onFetch(result) {
      identifier  = result.get(1);

      callbackStr = "%s(\"%s\")";
      callbackStr = replaceFirst(callbackStr, "%s", callback);
      callbackStr = replaceFirst(callbackStr, "%s", identifier);
      execute(callbackStr);
    }
  };

  fetchOne(q, cb);
}
