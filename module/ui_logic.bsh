import android.util.Log;

Object dialog;          // Used to help coordinate the display of a "busy..." dialog
String parentTabgroup;  // Used to allow entities to be saved as children
String parentTabgroup__;// Used to allow entities to be saved as children
String redirectTab;     // makes newTab work as expected
String username = "";
String userid   = "";

setFileSyncEnabled(true);
setSyncDelay(5.0f);
setSyncEnabled(true);
setSyncMaxInterval(600.0f);
setSyncMinInterval(5.0f);

makeLocalID(){
  fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);", null);
  fetchOne("DROP VIEW IF EXISTS parentchild;", null);
  fetchOne("CREATE VIEW parentchild AS "+
           "SELECT parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb as parentparticipatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename, child.participatesverb as childparticipatesverb, child.aenttypename as childaenttypename "+
           "  FROM (SELECT uuid, participatesverb, aenttypename, relationshipid"+
           "          FROM latestnondeletedaentreln "+
           "          JOIN relationship USING (relationshipid) "+
           "          JOIN latestnondeletedarchent USING (uuid) "+
           "          JOIN aenttype USING (aenttypeid)) parent "+
           "  JOIN (SELECT uuid, relationshipid, participatesverb, aenttypename "+
           "          FROM latestnondeletedaentreln "+
           "          JOIN relationship USING (relationshipid) "+
           "          JOIN latestnondeletedarchent USING (uuid) "+
           "          JOIN aenttype USING (aenttypeid)) child "+
           "    ON (parent.relationshipid = child.relationshipid AND parent.uuid != child.uuid);", null);
}
makeLocalID();

insertIntoLocalSettings(String key, String val) {
  fetchOne("REPLACE INTO localSettings(key, value) VALUES('" + key + "', '" + val + "');");
}

insertIntoLocalSettings(String key, Integer val) {
  insertIntoLocalSettings(key, Integer.toString(val));
}

setFieldValueFromLocalSettings(String key, String ref) {
  String q = "SELECT value FROM localSettings WHERE key = '" + key + "';";
  fetchOne(q, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue(ref, result.get(0));
      }
    }
  });
}

newTab(String tab, Boolean resolveTabGroups) {
  if (!resolveTabGroups) {
    return newTab(tab);
  }

  tab = tab.replaceAll("/$", "");
  tab = tab.replaceAll("^/", "");

  path = tab.split("/");
  switch (path.length) {
    case 0:
      break;
    case 1:
      newTabGroup(path[0]);
      break;
    case 2:
      String tabgroupString = path[0];
      String tabString      = path[0] + "/" + path[1];

      redirectTab = tabString;
      String onShowTabgroup = "if (!isNull(redirectTab)) { newTab(redirectTab); redirectTab = \"\"; }";
      addOnEvent(tabgroupString, "show", onShowTabgroup);

      newTabGroup(tabgroupString);
      newTab(tabString);
      break;
    default:
  }
}

/******************************************************************************/
/*                            BINDING ACCUMULATOR                             */
/*                                                                            */
/* Allows onEvent bindings for the same element to accumulate over multiple   */
/* onEvent calls instead of having later calls override earlier ones.         */
/******************************************************************************/
Map events = new HashMap();
String SEP = Character.toString ((char) 0); // Beanshell is stupid and won't let me write "\0"

/* Returns the set of statements bound to an element at `ref` and occuring on
 * `event`.
 */
getStatements(String ref, String event) {
  String    key = ref + SEP + event;
  ArrayList val = (ArrayList) events.get(key);
  if (val == null) {
    val = new ArrayList();
    events.put(key, val);
  }
  return val;
}

addOnEvent(String ref, String event, String statement) {
  // Calling `remove()` first ensures statement occurs once in the list, at the end.
  while(getStatements(ref, event).remove(statement));
  getStatements(ref, event).add(statement);
}

delOnEvent(String ref, String event, String statement) {
  while(getStatements(ref, event).remove(statement));
}

bindOnEvent(String ref, String event) {
  ArrayList stmts = getStatements(ref, event);
  String stmtsExpr = "";
  for (String s : stmts) {
    stmtsExpr += s;
    stmtsExpr += "; ";
  }

  onEvent(ref, event, stmtsExpr);
}

bindOnEvents() {
  for (String key : events.keySet()) {
    refevent = key.split(SEP);
    ref   = refevent[0];
    event = refevent[1];
    bindOnEvent(ref, event);
  }
}

/******************************************************************************/
/*                           DROPDOWN VALUE GETTER                            */
/*                                                                            */
/* For consistency with `getListItemValue()`.                                 */
/******************************************************************************/
String dropdownItemValue = null;

getDropdownItemValue() {
  return dropdownItemValue;
}

addOnEvent("Login/Login/Logger_ID", "click", "dropdownItemValue = getFieldValue(\"Login/Login/Logger_ID\")");
addOnEvent("Transect/Transect/Landform", "click", "dropdownItemValue = getFieldValue(\"Transect/Transect/Landform\")");
addOnEvent("Transect/Transect/Slope_Gradient", "click", "dropdownItemValue = getFieldValue(\"Transect/Transect/Slope_Gradient\")");
addOnEvent("Transect/Transect/Geomorphological_Activity", "click", "dropdownItemValue = getFieldValue(\"Transect/Transect/Geomorphological_Activity\")");
addOnEvent("Site/Site/Site_Aspect_Orientation", "click", "dropdownItemValue = getFieldValue(\"Site/Site/Site_Aspect_Orientation\")");
addOnEvent("Site/Close_Site/Shelter_Cave_Formation", "click", "dropdownItemValue = getFieldValue(\"Site/Close_Site/Shelter_Cave_Formation\")");
addOnEvent("Site/Close_Site/Rock_Surface_Condition", "click", "dropdownItemValue = getFieldValue(\"Site/Close_Site/Rock_Surface_Condition\")");
addOnEvent("Site/Feature/Recorded_Features", "click", "dropdownItemValue = getFieldValue(\"Site/Feature/Recorded_Features\")");
addOnEvent("Feature/Feature/Feature_Condition", "click", "dropdownItemValue = getFieldValue(\"Feature/Feature/Feature_Condition\")");
addOnEvent("Feature/Feature/Select_Feature_Type", "click", "dropdownItemValue = getFieldValue(\"Feature/Feature/Select_Feature_Type\")");
addOnEvent("Feature/Artefact/In_Situ_Artefact", "click", "dropdownItemValue = getFieldValue(\"Feature/Artefact/In_Situ_Artefact\")");
addOnEvent("Feature/Artefact/Stratified_Artefact", "click", "dropdownItemValue = getFieldValue(\"Feature/Artefact/Stratified_Artefact\")");
addOnEvent("Feature/Artefact/Artefact_Raw_Material", "click", "dropdownItemValue = getFieldValue(\"Feature/Artefact/Artefact_Raw_Material\")");
addOnEvent("Feature/Artefact/Artefact_Description_for_Aboriginal_Stone_Artefacts", "click", "dropdownItemValue = getFieldValue(\"Feature/Artefact/Artefact_Description_for_Aboriginal_Stone_Artefacts\")");
addOnEvent("Feature/Artefact/Artefact_Colour", "click", "dropdownItemValue = getFieldValue(\"Feature/Artefact/Artefact_Colour\")");
addOnEvent("Feature/Artefact/Artefact_Status_Modification", "click", "dropdownItemValue = getFieldValue(\"Feature/Artefact/Artefact_Status_Modification\")");
addOnEvent("Feature/Artefact/Platform_Surface_for_Aboriginal_Stone_Artefacts", "click", "dropdownItemValue = getFieldValue(\"Feature/Artefact/Platform_Surface_for_Aboriginal_Stone_Artefacts\")");
addOnEvent("Feature/Artefact/Platform_Type_for_Aboriginal_Stone_Artefacts", "click", "dropdownItemValue = getFieldValue(\"Feature/Artefact/Platform_Type_for_Aboriginal_Stone_Artefacts\")");
addOnEvent("Feature/Artefact/Termination_for_Aboriginal_Stone_Artefacts", "click", "dropdownItemValue = getFieldValue(\"Feature/Artefact/Termination_for_Aboriginal_Stone_Artefacts\")");
addOnEvent("Feature/Artefact/Cross_Section_for_Aboriginal_Artefacts", "click", "dropdownItemValue = getFieldValue(\"Feature/Artefact/Cross_Section_for_Aboriginal_Artefacts\")");
addOnEvent("Feature/Intangible_Value/Intangible_Value_Type", "click", "dropdownItemValue = getFieldValue(\"Feature/Intangible_Value/Intangible_Value_Type\")");
addOnEvent("Feature/Art/Art_Form", "click", "dropdownItemValue = getFieldValue(\"Feature/Art/Art_Form\")");
addOnEvent("Feature/Art/Art_Main_Colour", "click", "dropdownItemValue = getFieldValue(\"Feature/Art/Art_Main_Colour\")");
addOnEvent("Feature/Art/Art_Condition", "click", "dropdownItemValue = getFieldValue(\"Feature/Art/Art_Condition\")");
addOnEvent("Feature/Grinding_Groove/Type_of_Grinding_Groove", "click", "dropdownItemValue = getFieldValue(\"Feature/Grinding_Groove/Type_of_Grinding_Groove\")");
addOnEvent("Feature/Shell/Dominant_Species", "click", "dropdownItemValue = getFieldValue(\"Feature/Shell/Dominant_Species\")");
addOnEvent("Feature/Shell/Approximate_Percentage_of_Dominant_Species_as_Part_of_Assemblage", "click", "dropdownItemValue = getFieldValue(\"Feature/Shell/Approximate_Percentage_of_Dominant_Species_as_Part_of_Assemblage\")");
addOnEvent("Feature/Hearth_Ground_Oven/Hearth_Components", "click", "dropdownItemValue = getFieldValue(\"Feature/Hearth_Ground_Oven/Hearth_Components\")");
addOnEvent("Feature/Potential_Archaeological_Deposit/PAD_in_Situ", "click", "dropdownItemValue = getFieldValue(\"Feature/Potential_Archaeological_Deposit/PAD_in_Situ\")");
addOnEvent("Feature/Potential_Archaeological_Deposit/PAD_Stratified", "click", "dropdownItemValue = getFieldValue(\"Feature/Potential_Archaeological_Deposit/PAD_Stratified\")");
addOnEvent("Feature/Potential_Archaeological_Deposit/PAD_Type", "click", "dropdownItemValue = getFieldValue(\"Feature/Potential_Archaeological_Deposit/PAD_Type\")");
addOnEvent("Feature/Culturally_Modified_Tree/Tree_Status", "click", "dropdownItemValue = getFieldValue(\"Feature/Culturally_Modified_Tree/Tree_Status\")");
addOnEvent("Feature/Culturally_Modified_Tree/CM_Tree_Shape", "click", "dropdownItemValue = getFieldValue(\"Feature/Culturally_Modified_Tree/CM_Tree_Shape\")");
addOnEvent("Feature/Culturally_Modified_Tree/CM_Tree_Orientation", "click", "dropdownItemValue = getFieldValue(\"Feature/Culturally_Modified_Tree/CM_Tree_Orientation\")");
addOnEvent("Feature/Culturally_Modified_Tree/Carving_Type", "click", "dropdownItemValue = getFieldValue(\"Feature/Culturally_Modified_Tree/Carving_Type\")");
addOnEvent("Feature/Culturally_Modified_Tree/Axe_Marks", "click", "dropdownItemValue = getFieldValue(\"Feature/Culturally_Modified_Tree/Axe_Marks\")");

/******************************************************************************/
/*                                 ACTION BAR                                 */
/******************************************************************************/
addActionBarItem("clean_synced_files", new ActionButtonCallback() {
  actionOnLabel() {
    "{Clean_Synced_Files}";
  }
  actionOn() {
    cleanSyncedFiles();
  }
});

addActionBarItem("sync", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Sync}";
  }
  actionOn() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
    showToast("{Sync_Disabled}");
  }
  isActionOff() {
    isSyncEnabled();
  }
  actionOffLabel() {
    "{Enable_Sync}";
  }
  actionOff() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
    showToast("{Sync_Enabled}");
  }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Internal_GPS}";
  }
  actionOn() {
    stopGPS();
    showToast("{Internal_GPS_Disabled}");
    updateGPSDiagnostics();
  }
  isActionOff() {
    isInternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_Internal_GPS}";
  }
  actionOff() {
    if(isExternalGPSOn()) {
      stopGPS();
    }
    startInternalGPS();
    showToast("{Internal_GPS_Enabled}");
    updateGPSDiagnostics();
  }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_External_GPS}";
  }
  actionOn() {
    stopGPS();
    if (isBluetoothConnected()) {
      showToast("{External_GPS_Disabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
    }
    updateGPSDiagnostics();
  }
  isActionOff() {
    isExternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_External_GPS}";
  }
  actionOff() {
    if(isInternalGPSOn()) {
      stopGPS();
    }
    startExternalGPS();
    if(isBluetoothConnected()) {
      showToast("{External_GPS_Enabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
      this.actionOn();
    }
    updateGPSDiagnostics();
  }
});


/******************************************************************************/
/*                                    GPS                                     */
/******************************************************************************/

updateGPSDiagnostics() {
  String diagnosticsRef = "";
  if (diagnosticsRef.equals("")) {
    return;
  }

  String status         = "";
  String previousStatus = getFieldValue(diagnosticsRef);
  String notInitialised = "{GPS_is_not_initialised}";

  // Check if GPS is initialised or was previously initialised.
  if (!isExternalGPSOn() && !isInternalGPSOn()) {
    if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) { // previous gps status is some last valid coordinate.
      // This is hackish. Arch16n substitution happens only at display-time, but the following if clause requires substitution to have happened at run-time
      String error = "";
      error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
      setFieldValue(diagnosticsRef, error);   // Arch16n entry is substituted after this
      error = getFieldValue(diagnosticsRef);

      // check that error message wasn't previously appended to the previous status message.
      if (previousStatus.length()    >= error.length() &&
          previousStatus.subSequence(0, error.length()).equals(error)) {
        status = previousStatus;
      } else {
        status = error + "\n" + previousStatus;
      }
    } else {
      status = notInitialised;
    }
  } else {
    status += "{Internal_GPS}: ";
    if (isInternalGPSOn())
    {
      status += "{on}";
    } else {
      status += "{off}";
    }
    status += "\nExternal GPS: ";
    if (isExternalGPSOn())
    {
      if (isBluetoothConnected()) {
        status += "{on_and_bluetooth_connected}";
      } else {
        status += "{on_and_bluetooth_disconnected}";
      }
    } else {
      status += "{off}";
    }
    Object position = getGPSPosition();
    if (position != null) {
      Object projPosition = getGPSPositionProjected();
      status += "\n{Latitude}: " + position.getLatitude();
      status += "   {Longitude}: " + position.getLongitude();
      status += "\n{Northing}: " + projPosition.getLatitude();
      status += "   {Easting}: " + projPosition.getLongitude();
      status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
    } else {
      status += "\n{Position}: {no_GPS_position_could_be_found}";
    }
  }
  setFieldValue(diagnosticsRef, status);
}

/******************************************************************************/
/*                                 USER LOGIN                                 */
/******************************************************************************/

String userMenuPath = "Login/Login/Logger_ID";

populateListForUsers(){
  String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                   "  FROM user "+
                                   " WHERE userdeleted is null;";

  fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
    onFetch(result) {
      populateDropDown(userMenuPath, result, true);
    }
  });
}

selectUser () {
  String userVocabId  = getFieldValue(userMenuPath);
  if (isNull(userVocabId)) {
    username = "";
    userid = "";
    return;
  }
  String userQ        = "SELECT userid,fname,lname,email FROM user " +
                        "WHERE  userid='" + userVocabId + "';";
  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      user = new User(
            result.get(0),
            result.get(1),
            result.get(2),
            result.get(3)
      );
      setUser(user);
      username = result.get(1) + " " + result.get(2);
      userid   = result.get(0);
    }
  };

  fetchOne(userQ, callback);
}

addOnEvent(userMenuPath, "show",  "populateListForUsers()");
addOnEvent(userMenuPath, "click", "selectUser()");


/******************************************************************************/
/*                              MENU POPULATION                               */
/******************************************************************************/
/** Fetches the contents of a specifed vocabulary and stores it in the given list. **/
fetchVocab(String vocabName, List storageList) {
  fetchVocab(vocabName, storageList, null);
}
fetchVocab(String vocabName, List storageList, String callbackFunction) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      storageList.addAll(result);
      Log.d("fetchVocab()", "Fetched vocabulary \"" + vocabname + "\" contents: " + result.toString());
      if (callbackFunction != null && !isNull(callbackFunction)) {
        execute(callbackFunction);
      }
    }
  });
}

/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  if (isNull(type) || isNull(path) || isNull(attrib)) {
    Log.e("makeVocab()", "Can't make populate a vocab when the given type, path or attribute is Null");
    return;
  }

  if (type.equals("PictureGallery")) {
    String pictureGalleryQuery = "SELECT vocabid, vocabname, pictureurl "+
                                 "  FROM vocabulary "+
                                 "  LEFT OUTER JOIN attributekey USING (attributeid) "+
                                 " WHERE attributename = '" + attrib + "' "+
                                 " ORDER BY  vocabcountorder;";
    fetchAll(pictureGalleryQuery, new FetchCallback() {
      onFetch(pictures) {
        populatePictureGallery(path, pictures);
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
    return;
  }

  if (type.equals("HierarchicalPictureGallery")) {
    populateHierarchicalPictureGallery(path, attrib);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  if (type.equals("HierarchicalDropDown")) {
    // populateHierarchicalDropDown(path, attrib);
    populateHierarchicalDropDown(path, attrib, true);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  String getAttributeVocabQuery = "SELECT vocabid, vocabname "+
                                  "  FROM vocabulary "+
                                  "  JOIN attributekey USING (attributeid) "+
                                  " WHERE attributename = '" + attrib + "' "+
                                  " ORDER BY vocabcountorder;";
  fetchAll(getAttributeVocabQuery,
    new FetchCallback() {
      onFetch(result) {
        // print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        Boolean hasNull =
                vocabExclusions == null
            || !vocabExclusions.contains("")
            && !vocabExclusions.contains(null);
        // print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          // populateDropDown(path, result);
          populateDropDown(path, result, hasNull);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}
makeVocab("DropDown", "Transect/Transect/Landform", "Landform");
makeVocab("DropDown", "Transect/Transect/Slope_Gradient", "Slope Gradient");
makeVocab("PictureGallery", "Transect/Transect/Ground_Surface_Visibility", "Ground Surface Visibility");
makeVocab("PictureGallery", "Transect/Transect/Ground_Surface_Exposure", "Ground Surface Exposure");
makeVocab("DropDown", "Transect/Transect/Geomorphological_Activity", "Geomorphological Activity");
makeVocab("RadioGroup", "Transect/Vars/Device_ID", "Device ID");
makeVocab("RadioGroup", "Site/Site/Open_Close_Site", "Open Close Site");
makeVocab("DropDown", "Site/Site/Site_Aspect_Orientation", "Site Aspect Orientation");
makeVocab("CheckBoxGroup", "Site/Site/General_Condition_of_Site", "General Condition of Site");
makeVocab("RadioGroup", "Site/Open_Site/Subsurface_Potential", "Subsurface Potential");
makeVocab("DropDown", "Site/Close_Site/Shelter_Cave_Formation", "Shelter Cave Formation");
makeVocab("DropDown", "Site/Close_Site/Rock_Surface_Condition", "Rock Surface Condition");
makeVocab("CheckBoxGroup", "Site/Feature/Feature_Type", "Feature Type");
makeVocab("DropDown", "Feature/Feature/Feature_Condition", "Feature Condition");
makeVocab("DropDown", "Feature/Feature/Select_Feature_Type", "Select Feature Type");
makeVocab("DropDown", "Feature/Artefact/In_Situ_Artefact", "In Situ Artefact");
makeVocab("DropDown", "Feature/Artefact/Stratified_Artefact", "Stratified Artefact");
makeVocab("DropDown", "Feature/Artefact/Artefact_Raw_Material", "Artefact Raw Material");
makeVocab("RadioGroup", "Feature/Artefact/Artefact_Type", "Artefact Type");
makeVocab("HierarchicalDropDown", "Feature/Artefact/Artefact_Description_for_Aboriginal_Stone_Artefacts", "Artefact Description for Aboriginal Stone Artefacts");
makeVocab("HierarchicalDropDown", "Feature/Artefact/Artefact_Colour", "Artefact Colour");
makeVocab("DropDown", "Feature/Artefact/Artefact_Status_Modification", "Artefact Status Modification");
makeVocab("DropDown", "Feature/Artefact/Platform_Surface_for_Aboriginal_Stone_Artefacts", "Platform Surface for Aboriginal Stone Artefacts");
makeVocab("DropDown", "Feature/Artefact/Platform_Type_for_Aboriginal_Stone_Artefacts", "Platform Type for Aboriginal Stone Artefacts");
makeVocab("DropDown", "Feature/Artefact/Termination_for_Aboriginal_Stone_Artefacts", "Termination for Aboriginal Stone Artefacts");
makeVocab("DropDown", "Feature/Artefact/Cross_Section_for_Aboriginal_Artefacts", "Cross Section for Aboriginal Artefacts");
makeVocab("DropDown", "Feature/Intangible_Value/Intangible_Value_Type", "Intangible Value Type");
makeVocab("RadioGroup", "Feature/Art/Pigment_Engraved", "Pigment Engraved");
makeVocab("RadioGroup", "Feature/Art/Super-impositioning", "Super-impositioning");
makeVocab("CheckBoxGroup", "Feature/Art/Art_Motif", "Art Motif");
makeVocab("CheckBoxGroup", "Feature/Art/Application_Technique", "Application Technique");
makeVocab("DropDown", "Feature/Art/Art_Form", "Art Form");
makeVocab("DropDown", "Feature/Art/Art_Main_Colour", "Art Main Colour");
makeVocab("CheckBoxGroup", "Feature/Art/Art_Location", "Art Location");
makeVocab("DropDown", "Feature/Art/Art_Condition", "Art Condition");
makeVocab("DropDown", "Feature/Grinding_Groove/Type_of_Grinding_Groove", "Type of Grinding Groove");
makeVocab("RadioGroup", "Feature/Grinding_Groove/Profile_Shape", "Profile Shape");
makeVocab("RadioGroup", "Feature/Shell/Shell_Distribution", "Shell Distribution");
makeVocab("CheckBoxGroup", "Feature/Shell/Species_Present", "Species Present");
makeVocab("DropDown", "Feature/Shell/Dominant_Species", "Dominant Species");
makeVocab("DropDown", "Feature/Shell/Approximate_Percentage_of_Dominant_Species_as_Part_of_Assemblage", "Approximate Percentage of Dominant Species as Part of Assemblage");
makeVocab("DropDown", "Feature/Hearth_Ground_Oven/Hearth_Components", "Hearth Components");
makeVocab("DropDown", "Feature/Potential_Archaeological_Deposit/PAD_in_Situ", "PAD in Situ");
makeVocab("DropDown", "Feature/Potential_Archaeological_Deposit/PAD_Stratified", "PAD Stratified");
makeVocab("DropDown", "Feature/Potential_Archaeological_Deposit/PAD_Type", "PAD Type");
makeVocab("RadioGroup", "Feature/Potential_Archaeological_Deposit/PAD_Surface_Artefacts", "PAD Surface Artefacts");
makeVocab("RadioGroup", "Feature/Culturally_Modified_Tree/CM_Tree_Type", "CM Tree Type");
makeVocab("RadioGroup", "Feature/Culturally_Modified_Tree/Tree_Species", "Tree Species");
makeVocab("RadioGroup", "Feature/Culturally_Modified_Tree/Living_Status", "Living Status");
makeVocab("DropDown", "Feature/Culturally_Modified_Tree/Tree_Status", "Tree Status");
makeVocab("CheckBoxGroup", "Feature/Culturally_Modified_Tree/CM_Tree_Damage", "CM Tree Damage");
makeVocab("RadioGroup", "Feature/Culturally_Modified_Tree/Regrowth", "Regrowth");
makeVocab("RadioGroup", "Feature/Culturally_Modified_Tree/Is_a_Tree_Health_Assessment_Required", "Is a Tree Health Assessment Required");
makeVocab("DropDown", "Feature/Culturally_Modified_Tree/CM_Tree_Shape", "CM Tree Shape");
makeVocab("DropDown", "Feature/Culturally_Modified_Tree/CM_Tree_Orientation", "CM Tree Orientation");
makeVocab("DropDown", "Feature/Culturally_Modified_Tree/Carving_Type", "Carving Type");
makeVocab("DropDown", "Feature/Culturally_Modified_Tree/Axe_Marks", "Axe Marks");


/******************************************************************************/
/*                                 VALIDATION                                 */
/******************************************************************************/
/* `ref`  is a reference/path to a field
 * `name` is a human-readable name for that field
 * `cond` is a String containing a boolean expression that evaluates to true if
 *        and only if the the field pair returned by this function should be
 *        validated.
 *
 *  Returns a field pair (really just an ArrayList).
 */
fieldPair(String ref, String name, String cond) {
  List fp = new ArrayList();
  fp.add(ref);
  fp.add(name);
  fp.add(cond);
  return fp;
}

fieldPair(String ref, String name) {
  String t = "true";
  return fieldPair(ref, name, t);
}

/* Returns true if field specified by `ref` is valid. False otherwise.
 */
isValidField(String ref) {
  return !isNull(getFieldValue(ref));
}
/* `format` can either be HTML or PLAINTEXT
 */
validateFields(List fields, String format) {
  Integer numInvalid = 0;

  /* Build validation message string (and count how many invalid fields exist) */
  String out = "Please fill out the following fields:\n";
  for(f : fields) {
    String ref  = f.get(0); // Reference to field
    String name = f.get(1); // Human-readable name
    String cond = f.get(2); // Validation condition

    // Only validate a field whose validation condition evaluates to `true`
    Boolean doValidateField = (Boolean) eval(cond);
    if (!doValidateField)
      continue;

    // Add any invalid fields to the output and tally them
    if (!isValidField(ref)) {
      out += "- " + name + "\n";
      numInvalid++;
    }
  }
  // All the fields are valid; just overwrite `out` with a cheery message
  if (numInvalid == 0)
    out = "All fields contain valid data!";

  /* Format the output as dictated by `format` */
  if (format == "HTML") {
    out = out.replace("\n", "<br>");
  } else if (format == "PLAINTEXT") {
    ;
  }

  return out;
}

validateTransect() {
  List f = new ArrayList(); // Fields to be validated

  f.add(fieldPair("Transect/Transect/Transect_ID", "{Transect_ID}"));
  f.add(fieldPair("Transect/Transect/Number_of_Participants_in_Transect", "{Number_of_Participants_in_Transect}"));
  f.add(fieldPair("Transect/Transect/Landform", "{Landform}"));
  f.add(fieldPair("Transect/Transect/Slope_Gradient", "{Slope_Gradient}"));
  f.add(fieldPair("Transect/Transect/Vegetation_Notes", "{Vegetation_Notes}"));
  f.add(fieldPair("Transect/Transect/Ground_Surface_Visibility", "{Ground_Surface_Visibility}"));
  f.add(fieldPair("Transect/Transect/Ground_Surface_Exposure", "{Ground_Surface_Exposure}"));
  f.add(fieldPair("Transect/Transect/Geomorphological_Activity", "{Geomorphological_Activity}"));
  f.add(fieldPair("Transect/Vars/Device_ID", "{Device_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}

validateSite() {
  List f = new ArrayList(); // Fields to be validated

  f.add(fieldPair("Site/Site/Site_ID", "{Site_ID}"));
  f.add(fieldPair("Site/Site/Open_Close_Site", "{Open_Close_Site}"));
  f.add(fieldPair("Site/Site/Site_Aspect_Orientation", "{Site_Aspect_Orientation}"));
  f.add(fieldPair("Site/Site/General_Condition_of_Site", "{General_Condition_of_Site}"));
  f.add(fieldPair("Site/Open_Site/Total_Length_of_Visible_Site", "{Total_Length_of_Visible_Site__m_}"));
  f.add(fieldPair("Site/Open_Site/Average_Width_of_Visible_Site", "{Average_Width_of_Visible_Site__m_}"));
  f.add(fieldPair("Site/Open_Site/Estimated_Area_of_Visible_Site", "{Estimated_Area_of_Visible_Site}"));
  f.add(fieldPair("Site/Open_Site/Length_of_Assessed_Site_Area", "{Length_of_Assessed_Site_Area__m_}"));
  f.add(fieldPair("Site/Open_Site/Average_Width_of_Potential_Site_Area", "{Average_Width_of_Potential_Site_Area__m_}"));
  f.add(fieldPair("Site/Close_Site/Internal_Length", "{Internal_Length__m_}"));
  f.add(fieldPair("Site/Close_Site/Internal_Width", "{Internal_Width__m_}"));
  f.add(fieldPair("Site/Close_Site/Shelter_Height", "{Shelter_Height__m_}"));
  f.add(fieldPair("Site/Close_Site/Shelter_Floor_Area", "{Shelter_Floor_Area}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}

validateFeature() {
  List f = new ArrayList(); // Fields to be validated

  f.add(fieldPair("Feature/Feature/Feature_ID", "{Feature_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}



/******************************************************************************/
/*                                 AUTOSAVING                                 */
/******************************************************************************/
Map tabgroupToUuid = Collections.synchronizedMap(new HashMap());

getUuid(String tabgroup) {
  tabgroupToUuid.get(tabgroup);
}

setUuid(String tabgroup, String uuid) {
  tabgroupToUuid.put(tabgroup, uuid);
}

saveTabGroup(String tabgroup) {
  saveTabGroup(tabgroup, "");
}

saveTabGroup(String tabgroup, String callback) {
  Boolean enableAutosave  = true;
  String  id              = getUuid(tabgroup);
  List    geometry        = null;
  List    attributes      = null;
  String  parentTabgroup_ = parentTabgroup;
  Boolean userWasSet      = !username.equals("");

  parentTabgroup = null;
  SaveCallback saveCallback  = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      // Make a child-parent relationship if need be.
      if (newRecord && !isNull(parentTabgroup_)) {
        String rel = "";
        rel += parentTabgroup_.replaceAll("_", " ");
        rel += " - ";
        rel += tabgroup.replaceAll("_", " ");
        saveEntitiesToHierRel(
          rel,
          getUuid(parentTabgroup_),
          uuid,
          "Parent Of",
          "Child Of",
          null
        );
      }

      // This fixes an interesting bug. Without this, if a user was not set
      // (by calling `setUser`) at the time `saveTabGroup` was first called, but
      // set by the time `onSave` was called, the tab group is saved correctly
      // the first time only.
      //
      // Adding this allows subsequent saves to succeed. Presumably it plays
      // some role in helping FAIMS associate the correct user with a record.
      if (!userWasSet) {
        saveTabGroup(tabgroup);
      }

      execute(callback);
    }
    onError(message) {
      showToast(message);
    }
  };

  saveTabGroup(tabgroup, id, geometry, attributes, saveCallback, enableAutosave);
}

populateAuthorAndTimestamp(String tabgroup) {
  Map tabgroupToAuthor    = new HashMap();
  Map tabgroupToTimestamp = new HashMap();
  tabgroupToAuthor.put("Transect", "Transect/Vars/author");
  tabgroupToAuthor.put("Site", "Site/Vars/author");
  tabgroupToAuthor.put("Feature", "Feature/Vars/author");
  tabgroupToTimestamp.put("Transect", "Transect/Transect/timestamp");
  tabgroupToTimestamp.put("Site", "Site/Site/timestamp");
  tabgroupToTimestamp.put("Feature", "Feature/Vars/timestamp");

  String authorPath    = tabgroupToAuthor.get(tabgroup);
  String timestampPath = tabgroupToTimestamp.get(tabgroup);

  fmt     = "yyyy-MM-dd HH:mm:ss z";
  date    = new Date();
  dateFmt = new java.text.SimpleDateFormat(fmt);
  dateStr = dateFmt.format(date);

  String authorVal    = username;
  String timestampVal = dateStr;

  if (!isNull(authorPath))    setFieldValue(authorPath,    authorVal);
  if (!isNull(timestampPath)) setFieldValue(timestampPath, timestampVal);
}

onShowTransect () {
  // TODO: Add some things which should happen when this tabgroup is shown
  saveTabGroup("Transect");
}
onShowSite () {
  // TODO: Add some things which should happen when this tabgroup is shown
  saveTabGroup("Site");
}
onShowFeature () {
  // TODO: Add some things which should happen when this tabgroup is shown
  saveTabGroup("Feature");
}

addOnEvent("Transect", "show", "onShowTransect()");
addOnEvent("Site", "show", "onShowSite()");
addOnEvent("Feature", "show", "onShowFeature()");

onClickControlNewTransect () {
  // TODO: Add some things which should happen when this element is clicked
  parentTabgroup__ = "Control";
  newTransect();
}
onClickControlNewSite () {
  // TODO: Add some things which should happen when this element is clicked
  parentTabgroup__ = "Control";
  newSite();
}
onClickTransectAddNewSite () {
  // TODO: Add some things which should happen when this element is clicked
  String tabgroup = "Transect";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newSite();
}
onClickSiteNewFeature () {
  // TODO: Add some things which should happen when this element is clicked
  String tabgroup = "Site";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newFeature();
}

addOnEvent("Login/Login/Login", "click", "onClickLoginLogin()");
addOnEvent("Control/Control/New_Transect", "click", "onClickControlNewTransect()");
addOnEvent("Control/Control/New_Site", "click", "onClickControlNewSite()");
addOnEvent("Transect/Site/Add_New_Site", "click", "onClickTransectAddNewSite()");
addOnEvent("Site/Feature/New_Feature", "click", "onClickSiteNewFeature()");


/******************************************************************************/
/*                   AUDIO, CAMERA, FILE AND VIDEO BINDINGS                   */
/******************************************************************************/
addOnEvent("Transect/Transect/Button_Transect_Photo", "click", "attachPictureTo(\"Transect/Transect/Transect_Photo\")");
addOnEvent("Feature/Artefact/Button_Artefact_Photo", "click", "attachPictureTo(\"Feature/Artefact/Artefact_Photo\")");
addOnEvent("Feature/Art/Button_Art_Photo", "click", "attachPictureTo(\"Feature/Art/Art_Photo\")");
addOnEvent("Feature/Other_Feature/Button_Other_Feature_Photo", "click", "attachPictureTo(\"Feature/Other_Feature/Other_Feature_Photo\")");
addOnEvent("Feature/Grinding_Groove/Button_Grinding_Groove_Photo", "click", "attachPictureTo(\"Feature/Grinding_Groove/Grinding_Groove_Photo\")");
addOnEvent("Feature/Shell/Button_Shell_Photo", "click", "attachPictureTo(\"Feature/Shell/Shell_Photo\")");
addOnEvent("Feature/Hearth_Ground_Oven/Button_Hearth_Photo", "click", "attachPictureTo(\"Feature/Hearth_Ground_Oven/Hearth_Photo\")");
addOnEvent("Transect/Transect/Button_Transect_Sketch", "click", "attachFileTo(\"Transect/Transect/Transect_Sketch\")");
addOnEvent("Feature/Art/Button_Art_Sketch_Plan", "click", "attachFileTo(\"Feature/Art/Art_Sketch_Plan\")");
addOnEvent("Feature/Other_Feature/Button_Other_Feature_Sketch_Plan", "click", "attachFileTo(\"Feature/Other_Feature/Other_Feature_Sketch_Plan\")");
addOnEvent("Feature/Grinding_Groove/Button_Grinding_Groove_Sketch_Plan", "click", "attachFileTo(\"Feature/Grinding_Groove/Grinding_Groove_Sketch_Plan\")");
addOnEvent("Feature/Shell/Button_Shell_Sketch_Plan", "click", "attachFileTo(\"Feature/Shell/Shell_Sketch_Plan\")");
addOnEvent("Feature/Hearth_Ground_Oven/Button_Hearth_Sketch_Plan", "click", "attachFileTo(\"Feature/Hearth_Ground_Oven/Hearth_Sketch_Plan\")");

/******************************************************************************/
/*                             NAVIGATION DRAWER                              */
/******************************************************************************/
removeNavigationButtons() {
  removeNavigationButton("new");
  removeNavigationButton("duplicate");
  removeNavigationButton("delete");
  removeNavigationButton("validate");
}

addNavigationButtons(String tabgroup) {
  removeNavigationButtons();
  List tabgroupsToValidate = new ArrayList();
  tabgroupsToValidate.add("Transect");
  tabgroupsToValidate.add("Site");
  tabgroupsToValidate.add("Feature");

  addNavigationButton("new", new ActionButtonCallback() {
    actionOnLabel() {
      "{New}";
    }
    actionOn() {
      if(!isNull(getUuid(tabgroup))) {
          newRecord(tabgroup);
          showToast("{New_record_created}");
      } else {
          showAlert("{Warning}", "{Any_unsaved_changes_will_be_lost}", "newRecord(\""+tabgroup+"\")", "");
      }
    }
  }, "success");
  addNavigationButton("duplicate", new ActionButtonCallback() {
    actionOnLabel() {
      "{Duplicate}";
    }
    actionOn() {
      if(!isNull(getUuid(tabgroup))) {
          duplicateRecord(tabgroup);
      } else {
          showWarning("{Warning}", "{This_record_is_unsaved_and_cannot_be_duplicated}");
      }
    }
  }, "primary");
  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "{Delete}";
    }
    actionOn() {
      deleteRecord(tabgroup);
    }
  }, "danger");
  if (tabgroupsToValidate.contains(tabgroup)) {
    addNavigationButton("validate", new ActionButtonCallback() {
      actionOnLabel() {
        "{Validate}";
      }
      actionOn() {
        String validationFunction = "validate" + tabgroup.replaceAll("_", "") + "()";
        eval(validationFunction);
      }
    }, "default");
  }
}

/******************************************************************************/
/*        ENTITY AND RELATIONSHIP SAVING AND LOADING HELPER FUNCTIONS         */
/******************************************************************************/
/** Saves two entity id's as a relation. **/
saveEntitiesToRel(String type, String entity1, String entity2) {
  String callback = null;
  saveEntitiesToRel(type, entity1, entity2, callback);
}

/** Saves two entity id's as a relation with some callback executed. **/
saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
  String e1verb = null;
  String e2verb = null;
  saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb, callback);
}

/** Saves two entity id's as a hierachical relation with some callback executed. **/
saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb, String callback) {
  if (isNull(entity1) || isNull(entity2)) return;
  saveRel(null, type, null, null, new SaveCallback() {
    onSave(rel_id, newRecord) {
      addReln(entity1, rel_id, e1verb);
      addReln(entity2, rel_id, e2verb);
      if(!isNull(callback)) {
         execute(callback);
      }
    }
    onError(message) {
      Log.e("saveEntitiesToHierRel", message);
      showToast(message);
    }
  });
}

// Makes a new record of the given tabgroup
newRecord(String tabgroup) {
  cancelTabGroup(tabgroup, false);

  String newTabGroupFunction = "new" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "newTabgroup()"
  eval(newTabGroupFunction);

  Log.d("newRecord", tabgroup);
}

// Deletes the current record of the given tabgroup
deleteRecord(String tabgroup) {
  String deleteTabGroupFunction = "delete" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "deleteTabgroup()"
  eval(deleteTabGroupFunction);

  Log.d("deleteRecord", tabgroup);
}

// Duplicates the current record of the given tabgroup
duplicateRecord(String tabgroup) {
  dialog = showBusy("Duplicating", "Please wait...");

  String duplicateTabGroupFunction = "duplicate" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "duplicateTabgroup()"
  eval(duplicateTabGroupFunction);

  Log.d("duplicateRecord", tabgroup);
}

// generic fetch saved attributes query
getDuplicateAttributeQuery(String originalRecordID, String attributesToDupe) {
  if (attributesToDupe.equals("")) {
    attributesToDupe = "''";
  }
  String duplicateQuery = "SELECT attributename, freetext, vocabid, measure, certainty " +
                          "  FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) " +
                          " WHERE attributename IN ('', "+attributesToDupe+") " +
                          "   AND uuid = '"+originalRecordID+"'; ";
  return duplicateQuery;
}

getDuplicateRelnQuery(String originalRecordID) {
  String dupeRelnQuery = "SELECT relntypename, parentparticipatesverb, childparticipatesverb, parentuuid "+
                         "  FROM parentchild join relationship using (relationshipid) "+
                         "  JOIN relntype using (relntypeid) "+
                         " WHERE childuuid = '"+originalRecordID+"' " +
                         "   AND parentparticipatesverb = 'Parent Of' ";
  return dupeRelnQuery;
}

makeDuplicateRelationships(fetchedAttributes, String newuuid){
  Log.e("Module", "makeDuplicateRelationships");
  for (savedAttribute : fetchedAttributes){
    //  saveEntitiesToHierRel(relnname, parent, child, parentverb, childverb, relSaveCallback);
    //relntypename, parentparticipatesverb, childparticipatesverb, childuuid
    String relntypename           = savedAttribute.get(0);
    String parentparticipatesverb = savedAttribute.get(1);
    String childparticipatesverb  = savedAttribute.get(2);
    String childuuid              = savedAttribute.get(3);
    saveEntitiesToHierRel(relntypename, newuuid, childuuid, parentparticipatesverb, childparticipatesverb, null);
  }
}

// generic get extra attributes
getExtraAttributes(fetchedAttributes) {
  List extraAttributes = createAttributeList();
  Log.d("Module", "Duplicating fetched attributes: " + fetchedAttributes.toString());
  for (savedAttribute : fetchedAttributes) {
    extraAttributes.add(
      createEntityAttribute(
        savedAttribute.get(0),
        savedAttribute.get(1),
        savedAttribute.get(2),
        savedAttribute.get(3),
        savedAttribute.get(4)
      )
    );
  }
  return extraAttributes;
}

loadEntity() {
  loadEntity(false);
}
loadEntity(Boolean isDropdown) {
  if (isDropdown) {
    loadEntityFrom(getDropdownItemValue());
  } else {
    loadEntityFrom(getListItemValue());
  }
}

loadEntityFrom(String entityID) {
  if (isNull(entityID)) {
    Log.e("Module", "Cannot load an entity with a null ID.");
    return;
  }

  String getEntTypeNameQ = "SELECT aenttypename " +
                           "  FROM latestnondeletedarchent " +
                           "  JOIN aenttype " +
                           " USING (aenttypeid) " +
                           " WHERE uuid = '" + entityID + "'";
  fetchAll(getEntTypeNameQ, new FetchCallback() {
    onFetch(result) {
      String archEntName = result.get(0).get(0);
      String loadFunction = "load" + archEntName.replaceAll(" ", "") + "From(entityID)"; // Typical value: loadContextFrom(entityID)
      eval(loadFunction);
    }
  });
}

newTransect(){
  String tabgroup = "Transect";

  String autoNumSource = "";
  autoNumSource = getFieldValue("Control/Control/Next_Transect_ID");
  if (isNull(autoNumSource)) {
    showWarning("{Alert}","{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  String autoNumDest = "";
  autoNumDest = "Transect/Transect/Transect_ID";
  incAutoNum(autoNumDest);
  inheritTransectFields();
}

duplicateTransect(){
  String tabgroup = "Transect";
  String uuidOld = getUuid(tabgroup);

  disableAutoSave(tabgroup);

  String autoNumDest = "";
  autoNumDest = "Transect/Transect/Transect_ID";
  incAutoNum(autoNumDest);

  populateCameraPictureGallery("Transect/Transect/Transect_Photo", new ArrayList());
  populateFileList("Transect/Transect/Transect_Sketch", new ArrayList());


  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      populateAuthorAndTimestamp(tabgroup);

      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());
          makeDuplicateRelationships(result, getUuid(tabgroup));
          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup, getUuid(tabgroup), null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          setUuid(tabgroup, autosaveUuid);
        }
      }, enable_autosave);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(getUuid(tabgroup), extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      excludeAttributes.add("Transect Photo");
      excludeAttributes.add("Transect Sketch");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

deleteTransect(){
  String tabgroup = "Transect";

  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteTransect()", "doNotDelete()");
  }
}

reallyDeleteTransect(){
  String tabgroup = "Transect";
  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
}

newSite(){
  String tabgroup = "Site";

  String autoNumSource = "";
  autoNumSource = getFieldValue("Control/Control/Next_Site_ID");
  if (isNull(autoNumSource)) {
    showWarning("{Alert}","{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  String autoNumDest = "";
  autoNumDest = "Site/Site/Site_ID";
  incAutoNum(autoNumDest);
  inheritSiteFields();
}

duplicateSite(){
  String tabgroup = "Site";
  String uuidOld = getUuid(tabgroup);

  disableAutoSave(tabgroup);

  String autoNumDest = "";
  autoNumDest = "Site/Site/Site_ID";
  incAutoNum(autoNumDest);



  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      populateAuthorAndTimestamp(tabgroup);

      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());
          makeDuplicateRelationships(result, getUuid(tabgroup));
          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup, getUuid(tabgroup), null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          setUuid(tabgroup, autosaveUuid);
        }
      }, enable_autosave);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(getUuid(tabgroup), extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

deleteSite(){
  String tabgroup = "Site";

  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteSite()", "doNotDelete()");
  }
}

reallyDeleteSite(){
  String tabgroup = "Site";
  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
}

newFeature(){
  String tabgroup = "Feature";

  String autoNumSource = "";
  autoNumSource = getFieldValue("Control/Control/Next_Feature_ID");
  if (isNull(autoNumSource)) {
    showWarning("{Alert}","{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  String autoNumDest = "";
  autoNumDest = "Feature/Feature/Feature_ID";
  incAutoNum(autoNumDest);
  inheritFeatureFields();
}

duplicateFeature(){
  String tabgroup = "Feature";
  String uuidOld = getUuid(tabgroup);

  disableAutoSave(tabgroup);

  String autoNumDest = "";
  autoNumDest = "Feature/Feature/Feature_ID";
  incAutoNum(autoNumDest);

  populateCameraPictureGallery("Feature/Artefact/Artefact_Photo", new ArrayList());
  populateFileList("Feature/Art/Art_Sketch_Plan", new ArrayList());
  populateCameraPictureGallery("Feature/Art/Art_Photo", new ArrayList());
  populateFileList("Feature/Other_Feature/Other_Feature_Sketch_Plan", new ArrayList());
  populateCameraPictureGallery("Feature/Other_Feature/Other_Feature_Photo", new ArrayList());
  populateFileList("Feature/Grinding_Groove/Grinding_Groove_Sketch_Plan", new ArrayList());
  populateCameraPictureGallery("Feature/Grinding_Groove/Grinding_Groove_Photo", new ArrayList());
  populateFileList("Feature/Shell/Shell_Sketch_Plan", new ArrayList());
  populateCameraPictureGallery("Feature/Shell/Shell_Photo", new ArrayList());
  populateFileList("Feature/Hearth_Ground_Oven/Hearth_Sketch_Plan", new ArrayList());
  populateCameraPictureGallery("Feature/Hearth_Ground_Oven/Hearth_Photo", new ArrayList());


  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      populateAuthorAndTimestamp(tabgroup);

      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());
          makeDuplicateRelationships(result, getUuid(tabgroup));
          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup, getUuid(tabgroup), null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          setUuid(tabgroup, autosaveUuid);
        }
      }, enable_autosave);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(getUuid(tabgroup), extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      excludeAttributes.add("Artefact Photo");
      excludeAttributes.add("Art Sketch Plan");
      excludeAttributes.add("Art Photo");
      excludeAttributes.add("Other Feature Sketch Plan");
      excludeAttributes.add("Other Feature Photo");
      excludeAttributes.add("Grinding Groove Sketch Plan");
      excludeAttributes.add("Grinding Groove Photo");
      excludeAttributes.add("Shell Sketch Plan");
      excludeAttributes.add("Shell Photo");
      excludeAttributes.add("Hearth Sketch Plan");
      excludeAttributes.add("Hearth Photo");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

deleteFeature(){
  String tabgroup = "Feature";

  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteFeature()", "doNotDelete()");
  }
}

reallyDeleteFeature(){
  String tabgroup = "Feature";
  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
}


doNotDelete(){
  showToast("{Delete_Cancelled}");
}
addOnEvent("Login", "show", "removeNavigationButtons()");
addOnEvent("Control", "show", "removeNavigationButtons()");
addOnEvent("Transect_Point", "show", "removeNavigationButtons()");
addOnEvent("Transect", "show", "addNavigationButtons(\"Transect\")");
addOnEvent("Site", "show", "addNavigationButtons(\"Site\")");
addOnEvent("Feature", "show", "addNavigationButtons(\"Feature\")");

/******************************************************************************/
/*                                   SEARCH                                   */
/******************************************************************************/
addOnEvent("Control/Search"               , "show"  , "search();");
addOnEvent("Control/Search/Entity_List"   , "click" , "loadEntity();");
addOnEvent("Control/Search/Search_Button" , "click" , "search()");
addOnEvent("Control/Search/Search_Term"   , "click" , "clearSearch()");
addOnEvent("Control/Search/Entity_Types"  , "click" , "search()");

entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{All}", ""));
entityTypes.add(new NameValuePair("{Transect}", "Transect"));
entityTypes.add(new NameValuePair("{Transect_Point}", "Transect Point"));
entityTypes.add(new NameValuePair("{Site}", "Site"));
entityTypes.add(new NameValuePair("{Feature}", "Feature"));
populateDropDown("Control/Search/Entity_Types", entityTypes);

clearSearch(){
  setFieldValue("Control/Search/Search_Term","");
}

search(){
  String tabgroup = "Control";
  String refEntityList  = tabgroup + "/Search/Entity_List";
  String refSearchTerm  = tabgroup + "/Search/Search_Term";
  String refEntityTypes = tabgroup + "/Search/Entity_Types";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                       " WHERE uuid in (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers "+
                       "                 WHERE measure LIKE '"+term+"'||'%'  "+
                       "                   AND ( aenttypename LIKE '"+type+"' OR '' = '"+type+"' ) "+
                       "                )  "+
                       " ORDER BY response "+
                       " LIMIT ? "+
                       "OFFSET ? ";

  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS(tabgroup);

  Log.d("Module", "Search query: " + searchQuery);
}

loadTransectFrom(String uuid) {
  String tabgroup = "Transect";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  showTabGroup(tabgroup, uuid);
}

loadTransectPointFrom(String uuid) {
  String tabgroup = "Transect_Point";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  showTabGroup(tabgroup, uuid);
}




/******************************************************************************/
/*                          TAKE FROM GPS BUTTON(S)                           */
/******************************************************************************/
addOnEvent("Site/Site/Take_From_GPS", "click", "takePoint(\"Site\")");
addOnEvent("Feature/Feature/Take_From_GPS", "click", "takePoint(\"Feature\")");

/* Takes the current point using gps. */
takePoint(String tabgroup) {
  Map tabgroupToTabRef = new HashMap();
  tabgroupToTabRef.put("Site", "Site/Site/");
  tabgroupToTabRef.put("Feature", "Feature/Feature/");

  String archEntType = tabgroup.replaceAll("_", " ");
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)){
    showToast("Please enter data first and let a save occur.");
    return;
  }

  Object position = getGPSPosition();
  if (position == null) {
    showToast("{GPS_Not_Initialised}");
    return;
  }

  Object projPosition = getGPSPositionProjected();
  Double latitude     = position.getLatitude();
  Double longitude    = position.getLongitude();
  Double northing     = projPosition.getLatitude();
  Double easting      = projPosition.getLongitude();

  samplePoint = new Point(new MapPos(easting, northing), null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);

  String accuracy = "Accuracy: " + getGPSEstimatedAccuracy();
  setFieldAnnotation(tabgroupToTabRef.get(tabgroup) + "Latitude", accuracy);

  saveArchEnt(currentUuid, archEntType, geolist, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      print("[takePoint()] Added geometry: " + geolist);
      fillInGPS(tabgroup);
    }
  });
}

/* Sets the value of GPS views for the given tab path. */
fillInGPS(String tabgroup) {
  Map tabgroupToTabRef = new HashMap();
  tabgroupToTabRef.put("Site", "Site/Site/");
  tabgroupToTabRef.put("Feature", "Feature/Feature/");

  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)) {
    return;
  }

  String query = "SELECT x(transform(geospatialcolumn,                4326)) as longtiude, " +
                 "       y(transform(geospatialcolumn,                4326)) as latitude, " +
                 "       x(transform(geospatialcolumn, "+getModuleSrid()+")) as easting, " +
                 "       y(transform(geospatialcolumn, "+getModuleSrid()+")) as northing " +
                 "  FROM latestnondeletedarchent, vocabulary " +
                 " WHERE uuid = '" + currentUuid + "';";

  fetchOne(query, new FetchCallback() {
    onFetch(result) {
      print("[fillInGPS()] Fetched DB transformed geometry: " + result);
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "Longitude" , result.get(0));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "Latitude"  , result.get(1));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "Easting"   , result.get(2));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "Northing"  , result.get(3));
    }
  });
}

/******************************************************************************/
/*                       AUTONUMBERING HELPER FUNCTIONS                       */
/******************************************************************************/
/*
 * If value of field specified by `ref` is null, sets the field to `defaultVal`,
 * otherwise increments its value.
 *
 * Returns the value the field was updated to.
 */
incField(String ref, Integer defaultVal) {
  String val = getFieldValue(ref);

  if (isNull(val)) {
    setFieldValue(ref, defaultVal);
    return defaultVal;
  }

  Integer inc = Integer.parseInt(val) + 1;
  setFieldValue(ref, inc);
  insertIntoLocalSettings(ref, inc.toString());

  return inc;
}

/* Increments the field at `ref` or returns null if it does not contain a
 * number.
 */
incField(String ref) {
  return incField(ref, 1);
}

addOnEvent("Control", "show", "onShowAutonum()");

/* This function should only be called once since it creates event handlers,
 * otherwise multiple copies of the same handler will trigger with the event.
 */
onShowAutonum() {
  List l = new ArrayList();
  l.add("Control/Control/Next_Transect_ID");
  l.add("Control/Control/Next_Site_ID");
  l.add("Control/Control/Next_Feature_ID");


  for (ref : l) {
    loadStartingId(ref);
  }
  for (ref : l) {
    onFocus(ref, null,  "insertIntoLocalSettings(\"" + ref + "\", getFieldValue(\"" + ref + "\"));");
  }
}

loadStartingId(String ref) {
  String idQ = "SELECT value FROM localSettings WHERE key = '" + ref + "';";
  fetchOne(idQ, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue(ref, result.get(0));
      } else {
        setFieldValue(ref, "1");
      }
    }
  });
}

incAutoNum(String destPath) {
  Map destToSource = new HashMap();
  destToSource.put("Transect/Transect/Transect_ID", "Control/Control/Next_Transect_ID");
  destToSource.put("Site/Site/Site_ID", "Control/Control/Next_Site_ID");
  destToSource.put("Feature/Feature/Feature_ID", "Control/Control/Next_Feature_ID");

  String sourcePath = destToSource.get(destPath);
  String destVal    = getFieldValue(sourcePath);
  setFieldValue(destPath, destVal);
  incField(sourcePath);
}

/******************************************************************************/
/*                POPULATION OF ENTITY AND CHILD ENTITY LISTS                 */
/******************************************************************************/
/*
 * `viewType`   the type of GUI element to be populated. It can either equal
 *              "DropDown" or "List".
 * `path`       the reference of the GUI element to be populated.
 * `parentUuid` the parent in the relationship denoted by `relType`.
 * `entType`    the type of the entities the menu will be populated with.
 * `relType`    the name of the relationship the children are to be in with the
 *              entity denoted by `parentUuid`.
 */
populateMenuWithEntities (
  String viewType,
  String path,
  String parentUuid,
  String entType,
  String relType
) {
  String getChildEntitiesQ = "" +
    "SELECT childuuid, response "+
    "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers ON (childuuid = uuid) " +
    "  JOIN createdmodifiedatby USING (uuid) " +
    " WHERE relationshipid IN (SELECT relationshipid  " +
    "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid) " +
    "                           WHERE relntypename = '"+relType+"') " +
    "   AND parentuuid = " + parentUuid + " " +
    "   AND (childaenttypename = '"+entType+"' OR '"+entType+"' = '') " +
    " ORDER BY createdat DESC ";

  String getEntitiesQ = "" +
    "SELECT uuid, response "+
    "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
    " WHERE uuid in (SELECT uuid "+
    "                  FROM latestNonDeletedArchEntIdentifiers "+
    "                 WHERE aenttypename = '"+entType+"' OR '"+entType+"' = '' " +
    "               )  "+
    " ORDER BY response ";

  String q = null;
  if (relType.equals("")) {
    q = getEntitiesQ;
  } else {
    q = getChildEntitiesQ;
  }

  FetchCallback cbPopulateDropDown = new FetchCallback() {
    onFetch(result) {
      populateDropDown(path, result, true);
    }
  };

  switch (viewType) {
    case "DropDown":
      fetchAll(q, cbPopulateDropDown);
      break;
    case "List":
      q += " LIMIT ? OFFSET ? ";
      populateCursorList(path, q, 25);
      break;
    default:
      Log.e("populateMenuWithEntities ", "Unexpected type '" + viewType + "'");
  }
}

menus = new ArrayList();
menus.add(new String[] {
  "List",
  "Transect/Site/Recorded_Sites",
  "getUuid(\"Transect\")",
  "Site",
  "Transect - Site",
});
menus.add(new String[] {
  "DropDown",
  "Site/Feature/Recorded_Features",
  "getUuid(\"Site\")",
  "Feature",
  "Site - Feature",
});
for (m : menus) {
  String viewType       = m[0];
  String path           = m[1];
  String parentUuidCall = m[2];
  String entType        = m[3];
  String relType        = m[4];

  String functionCall = "";
  functionCall += "populateMenuWithEntities(";
  functionCall += "\"" + viewType       + "\"";
  functionCall += ", ";
  functionCall += "\"" + path           + "\"";
  functionCall += ", ";
  functionCall +=        parentUuidCall       ;
  functionCall += ", ";
  functionCall += "\"" + entType        + "\"";
  functionCall += ", ";
  functionCall += "\"" + relType        + "\"";
  functionCall += ")";

  addOnEvent(path, "show", functionCall);
}
addOnEvent("Transect/Site/Recorded_Sites", "click", "loadEntity()");
addOnEvent("Site/Feature/Recorded_Features", "click", "loadEntity(true)");

/******************************************************************************/
/*                             HANDWRITTEN LOGIC                              */
/******************************************************************************/

/***************************** UTILITY FUNCTIONS ******************************/

// Regex-free string replacement function
replaceFirst(haystack, needle, replacement) {
  i = haystack.indexOf(needle);
  if (i == -1)           return haystack;
  if (needle.equals("")) return haystack;
  pre  = haystack.substring(0, i                                   );
  post = haystack.substring(   i+needle.length(), haystack.length());
  return pre + replacement + post;
}

/***************************** DEVICE ID COPYING ******************************/
/* Triggered upon Transect creation using @POSTPROC.                          */
/******************************************************************************/

copyDeviceId() {
  src = "Login/Login/Device_ID";
  dst = "Transect/Vars/Device_ID";
  val = getFieldValue(src);

  setFieldValue(dst, val);
}
/**************************** DEVICE ID POPULATION ****************************/
makeVocab("RadioGroup", "Login/Login/Device_ID", "Device ID");

addOnEvent("Login",                 "show",  "loadDeviceId()");
addOnEvent("Login/Login/Device_ID", "click", "saveDeviceId()");

loadDeviceId() {
  dst = "Login/Login/Device_ID";
  setFieldValueFromLocalSettings(dst, dst);
}

saveDeviceId() {
  src = "Login/Login/Device_ID";
  val = getFieldValue(src);
  insertIntoLocalSettings(src, val);
}
/************************* DYNAMIC UI - FEATURE TABS **************************/
/* There are two cases to handle:                                             */
/*   (a) When a Feature is newly created.                                     */
/*   (b) When a Feature has been loaded.                                      */
/*                                                                            */
/* Case (a) is handled by on-click events which trigger                       */
/* `updateFeatureTabs()`.                                                     */
/*                                                                            */
/* Case (b) is handled by a callback to `showTabGroup`. This is implemented   */
/* by overwriting the auto-generated function `loadFeatureFrom` using         */
/* @POSTPROC.                                                                 */
/******************************************************************************/
addOnEvent("Feature",                             "show",   "updateFeatureTabs()");
addOnEvent("Feature/Feature/Select_Feature_Type", "select", "updateFeatureTabs()");

// Fetch the "Select Feature Type" vocab and populate the
// `SELECT_FEATURE_TYPE_VOCAB` global.
fetchSelectFeatureType() {
  SELECT_FEATURE_TYPE_VOCAB = new HashMap();

  attributeName = "Select Feature Type";

  q  = " SELECT    vocabid, vocabname";
  q += " FROM      vocabulary";
  q += " LEFT JOIN attributekey";
  q += " USING    (attributeid)";
  q += " WHERE     attributename = '%s'";
  q  = replaceFirst(q, "%s", attributeName);

  populateHashMap = new FetchCallback() {
    onFetch(result) {
      for (row : result) {
        vocabId   = row.get(0);
        vocabName = row.get(1);
        SELECT_FEATURE_TYPE_VOCAB.put(vocabId, vocabName);
      }
    }
  };

  fetchAll(q, populateHashMap);
}

// The `fetchSelectFeatureType` call is required to set
// `SELECT_FEATURE_TYPE_VOCAB` because async code in Beanshell/Java is DUMBBBB.
// Also, SELECT_FEATURE_TYPE_VOCAB is a HashMap: vocabId -> vocabName.
SELECT_FEATURE_TYPE_VOCAB = null;
fetchSelectFeatureType();

vocabNametoTabRef(vocabName) {
  if (vocabName == null) return null;

  // "{Vocab_Name}" -> "Vocab_Name"
  tabName = vocabName.substring(1, vocabName.length() - 1);

  tabRef = "Feature/%s";
  tabRef = replaceFirst(tabRef, "%s", tabName);

  return tabRef;
}

cancelAllFeatureTabs() {
  for (String vocabName: SELECT_FEATURE_TYPE_VOCAB.values()) {
    tabRef = vocabNametoTabRef(vocabName);
    cancelTab(tabRef, false);
  }
}

updateFeatureTabs() {
  mainTabRef  = "Feature/Feature";
  dropdownRef = "Feature/Feature/Select_Feature_Type";

  // Based on the value of the dropdown at `dropdownRef`, figure out the
  // reference to the tab which should be shown.
  vocabId        = getFieldValue(dropdownRef);
  vocabName      = SELECT_FEATURE_TYPE_VOCAB.get(vocabId);
  selectedTabRef = vocabNametoTabRef(vocabName);

  // The following lines do as shown here: http://i.imgur.com/f0GT1Dy.png
  cancelAllFeatureTabs();
  if (selectedTabRef == null) return;
  showTab(selectedTabRef);
  showTab(mainTabRef);
}

loadFeatureFrom(String uuid) {
  String tabgroup = "Feature";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      updateFeatureTabs();
    }
  };
  showTabGroup(tabgroup, uuid, cb);
}
/************************ DYNAMIC UI - OPEN/CLOSE SITE ************************/
/* There are two cases to handle:                                             */
/*   (a) When a Site is newly created.                                        */
/*   (b) When a Site has been loaded.                                         */
/*                                                                            */
/* Case (a) is handled by on-click events which trigger                       */
/* `updateOpenCloseTabs()`.                                                   */
/*                                                                            */
/* Case (b) is handled by a callback to `showTabGroup`. This is implemented   */
/* by overwriting the auto-generated function `loadSiteFrom` using @POSTPROC. */
/******************************************************************************/
addOnEvent("Site",                      "show",  "updateOpenCloseTabs()");
addOnEvent("Site/Site/Open_Close_Site", "click", "updateOpenCloseTabs()");

VOCAB_ID_OPEN  = null;
VOCAB_ID_CLOSE = null;
OPEN_CLOSE_SITE_VALS = new ArrayList();
fetchVocab("Open Close Site", OPEN_CLOSE_SITE_VALS, "setOpenCloseVocabIds()");

getVocabId(vocabName, vocabVals) {
  vocabName = "{" + vocabName + "}";
  vocabId   = null;
  for (List val : OPEN_CLOSE_SITE_VALS) {
    String thisVocabId   = val.get(0);
    String thisVocabName = val.get(1);

    if (vocabName.equals(thisVocabName)) {
      return thisVocabId;
    }
  }
}

setOpenCloseVocabIds() {
  VOCAB_ID_OPEN  = getVocabId("Open",  OPEN_CLOSE_SITE_VALS);
  VOCAB_ID_CLOSE = getVocabId("Close", OPEN_CLOSE_SITE_VALS);
}

updateOpenCloseTabs() {
  cancelSites();

  selectedId      = getFieldValue("Site/Site/Open_Close_Site");
  isSelectedOpen  = VOCAB_ID_OPEN .equals(selectedId);
  isSelectedClose = VOCAB_ID_CLOSE.equals(selectedId);

  if (isSelectedOpen)  openSite();
  if (isSelectedClose) closeSite();
}

cancelSites() {
  cancelTab("Site/Open_Site",  false);
  cancelTab("Site/Close_Site", false);
}
openSite() {showTab("Site/Open_Site" ); showTab("Site/Site");}
closeSite(){showTab("Site/Close_Site"); showTab("Site/Site");}

loadSiteFrom(String uuid) {
  String tabgroup = "Site";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      updateOpenCloseTabs();
    }
  };
  showTabGroup(tabgroup, uuid, cb);
}
/**************************** LOGIN TAB VALIDATION ****************************/
/* The autogen defines its own `onClickLoginLogin` function. This is          */
/* overridden using @POSTPROC.                                                */
/******************************************************************************/

onClickLoginLogin () {
  refDeviceId = "Login/Login/Device_ID";
  refLoggerId = userMenuPath; // Defined by autogen

  String loggerIdVocabId = getFieldValue(refLoggerId);
  String deviceIdVocabId = getFieldValue(refDeviceId);

  isSelectedDeviceId = !isNull(deviceIdVocabId);
  isSelectedLoggerId = !isNull(loggerIdVocabId);

  if (!isSelectedLoggerId) { noLoggerIdSelected(); return; }
  if (!isSelectedDeviceId) { noDeviceIdSelected(); return; }

  newTab("Control", true);
}

noDeviceIdSelected() {
  msgHead = "No Device ID Selected";
  msgBody = "A Device ID must be selected in order to log in.";
  showWarning(msgHead, msgBody);
}

noLoggerIdSelected() {
  msgHead  = "No Logger ID Selected";

  msgBody  = "Press 'OK' to select the user 'Other', or 'Cancel' to go back ";
  msgBody += "and select a Logger ID.";

  showAlert(msgHead, msgBody, "selectUserOther()", "");
}

// Log in as 'Other'. (i.e. Do a `setUser` call.)
selectUserOther() {
  // Warning for case where 'Other' user isn't present on FAIMS server.
  msgHead  = "Cannot Select User";
  msgBody  = "The user 'Other' was not found. Please add 'Other' to this ";
  msgBody += "module's list of users via the FAIMS server in order to log in.";

  // Select 'Other' user.
  q  = "SELECT userid, fname, lname, email ";
  q += "FROM   user ";
  q += "WHERE  fname = 'Other'";

  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      // Can't select user named 'Other'.  Tell user to add it to FAIMS server.
      if (result.size() == 0) {
        showWarning(msgHead, msgBody);
        return;
      }

      // Can select user named 'Other'.  Call `setUser` and set global variable
      // `user`.
      user = new User(
          result.get(0),
          result.get(1),
          result.get(2),
          result.get(3)
      );
      setUser(user);
      username = result.get(1) + " " + result.get(2);

      setFieldValue(userMenuPath, result.get(0));
    }
  };
  fetchOne(q, callback);
}
/***************************** TRANSECT GEOMETREY *****************************/
import java.util.concurrent.Semaphore;

addOnEvent("Transect/Transect/Start_Survey_Unit",  "click", "startSurveyUnit()");
addOnEvent("Transect/Transect/Finish_Survey_Unit", "click", "finishSurveyUnit()");
onFocus   ("Transect/Transect/Total_Transect_Width_m", "",  "populateSurveyExtent()");

INC_MUTEX = new Semaphore(1);

REF_EXTENT        = "Transect/Map/Survey_Extent_Square_Metres";
REF_UUID_STARTED  = "Transect/Vars/UUID_Started";
REF_UUID_FINISHED = "Transect/Vars/UUID_Finished";

REF_STATE = "Transect/Vars/Transect_State";

STATE_NONE     = "";
STATE_STARTED  = "STARTED";
STATE_FINISHED = "FINISHED";

startSurveyUnit() {
  if (!checkGps()) return;

  state = getState();
  if      (state.equals(STATE_NONE    )) tryIncrementingState();
  else if (state.equals(STATE_STARTED )) showToast("Survey already started");
  else if (state.equals(STATE_FINISHED)) showToast("Survey already finished");
}

finishSurveyUnit() {
  if (!checkGps()) return;

  state = getState();
  if      (state.equals(STATE_NONE    )) showToast("Survey not yet started");
  else if (state.equals(STATE_STARTED )) tryIncrementingState();
  else if (state.equals(STATE_FINISHED)) showToast("Survey already finished");
}

checkGps() {
  Object positionProj = getGPSPositionProjected();
  if (positionProj == null) {
    showToast("Unable to get GPS position");
    return false;
  }
  return true;
}

tryIncrementingState() {
  if (!INC_MUTEX.tryAcquire()) {
    showToast("Already taking a point...");
    return;
  }

  tabGroup               = "Transect";
  saveChildTransectPoint = "saveChildTransectPoint";

  // Already saved
  if (getUuid(tabGroup) != null) {
    uuid = getUuid(tabGroup);
    fetchIdentifier(uuid, saveChildTransectPoint);
    return;
  }

  // Not already saved. Save Transect immediately then enable autosaving.
  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabGroup, uuid);

      // This should be equivalent to the autogenerated saveTabGroup call from
      // the onShowTransect function definition. This enables autosave after the
      // below saveTabGroup call is complete.
      saveTabGroup(tabGroup);

      fetchIdentifier(uuid, saveChildTransectPoint);
    }
  };
  saveTabGroup(tabGroup, null, null, null, saveCallback);
}

saveChildTransectPoint(String parentId) {
  parentTabGroup = "Transect";
  childTabGroup  = "Transect Point";

  Object positionProj = getGPSPositionProjected();
  String parentUuid   = getUuid(parentTabGroup);

  if (isNull(parentUuid)) {
    // Shouldn't happen because `tryIncrementingState` should've set parentUuid.
    Log.e("saveChildTransectPoint()", "Parent UUID is null");
    INC_MUTEX.release();
    return;
  }
  if (positionProj == null) {
    INC_MUTEX.release();
    return;
  }

  lat = positionProj.getLatitude();
  lon = positionProj.getLongitude();
  MapPos pos   = new MapPos(lat, lon);
  Point  point = new Point(pos, null, (PointStyle) null, null);
  List   geoList = new ArrayList(); geoList.add(point);

  String state = incState();
  if (state == null) {
    // Shouldn't ever happen
    Log.e("saveChildTransectPoint()", "Unexpected state");
    showWarning("Error", "A critial error has occurred. Point not saved.");
    INC_MUTEX.release();
    return;
  }

  String order;
  if (state.equals(STATE_STARTED )) order = "0";
  if (state.equals(STATE_FINISHED)) order = "1";

  List attribs = createAttributeList();
  attribs.add(createEntityAttribute("State",     null, null, state,    null));
  attribs.add(createEntityAttribute("Parent ID", null, null, parentId, null));
  attribs.add(createEntityAttribute("Order",     null, null, order,    null));

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      showToast("Survey " + state.toLowerCase());

      String rel = "%s - %s";
      rel = replaceFirst(rel, "%s", parentTabGroup);
      rel = replaceFirst(rel, "%s", childTabGroup);

      saveEntitiesToHierRel(rel, parentUuid, uuid, "Parent Of", "Child Of", "");

      if (state.equals(STATE_STARTED )) setFieldValue(REF_UUID_STARTED,  uuid);
      if (state.equals(STATE_FINISHED)) setFieldValue(REF_UUID_FINISHED, uuid);

      populateSurveyExtent();

      INC_MUTEX.release();
    }
  };
  saveArchEnt(null, childTabGroup, geoList, attribs, saveCallback);
}

populateSurveyExtent() {
  String refTransectWidth = "Transect/Transect/Total_Transect_Width_m";
  String sTransectWidth;

  sTransectWidth = getFieldValue(refTransectWidth);
  uuidStarted    = getFieldValue(REF_UUID_STARTED );
  uuidFinished   = getFieldValue(REF_UUID_FINISHED);

  if (isNull(sTransectWidth)) return;
  if (isNull(uuidStarted   )) return;
  if (isNull(uuidFinished  )) return;

  String q = "";
  q += " SELECT distance(startpoint, endpoint), astext(startpoint), astext(endpoint)";
  q += "   FROM (SELECT transform(geospatialcolumn, %s) AS startpoint";
  q += "           FROM latestnondeletedarchent";
  q += "          WHERE uuid = %s";
  q += "        ),";
  q += "        (SELECT transform(geospatialcolumn, %s) AS endpoint";
  q += "           FROM latestnondeletedarchent";
  q += "          WHERE uuid = %s";
  q += "        )";
  q  = replaceFirst(q, "%s", getModuleSrid());
  q  = replaceFirst(q, "%s", uuidStarted    );
  q  = replaceFirst(q, "%s", getModuleSrid());
  q  = replaceFirst(q, "%s", uuidFinished   );

  FetchCallback populate = new FetchCallback() {
    onFetch(result) {
      String sTransectLength = result.get(0);

      Double dTransectLength = Double.valueOf(sTransectLength);
      Double dTransectWidth  = Double.valueOf(sTransectWidth);
      Double dExtent         = dTransectLength * dTransectWidth;

      setFieldValue(REF_EXTENT, dExtent);
    }
  };

  fetchOne(q, populate);
}

fetchIdentifier(String uuid, String callback) {
  String q = "";
  q += "SELECT uuid, response ";
  q += "FROM latestnondeletedarchentformattedidentifiers ";
  q += "WHERE uuid = '%s' ";
  q  = replaceFirst(q, "%s", uuid);

  cb = new FetchCallback() {
    onFetch(result) {
      identifier  = result.get(1);

      callbackStr = "%s(\"%s\")";
      callbackStr = replaceFirst(callbackStr, "%s", callback);
      callbackStr = replaceFirst(callbackStr, "%s", identifier);
      execute(callbackStr);
    }
  };

  fetchOne(q, cb);
}

getState() {
  return getFieldValue(REF_STATE);
}

getNextState() {
  if (getState().equals(STATE_NONE   )) return STATE_STARTED;
  if (getState().equals(STATE_STARTED)) return STATE_FINISHED;
  return null;
}

setState(val) {
  setFieldValue(REF_STATE, val);
  return val;
}

incState() {
  return setState(getNextState());
}
/***************************** FIELD INHERITANCE ******************************/
/* Linked using @POSTPROC.                                                    */
/******************************************************************************/
copyFieldValue(src, dst) {
  String val = getFieldValue(src);
  setFieldValue(dst, val);
}

// Don't delete me. This simplifies the code in @POSTPROC.
inheritTransectFields() {
  return;
}

inheritSiteFields() {
  //BEWARE! Weird formatting!
  if (parentTabgroup__.equals("Transect"))
  copyFieldValue(
    "Transect/Transect/Transect_ID",
    "Site/Vars/Site_Transect_ID"
  );
}

// Don't delete me. This simplifies the code in @POSTPROC.
inheritFeatureFields() {
  //BEWARE! Weird formatting!
  if (parentTabgroup__.equals("Site"))
  copyFieldValue(
    "Site/Vars/Site_Transect_ID",
    "Feature/Vars/Feature_Transect_ID"
  );
}
/****************************** SEARCH EXTENSION ******************************/
SEARCH_GUIDE  = "If the <b>Parent Transect ID</b> field (below) is filled in, ";
SEARCH_GUIDE += "the <b>Entity List</b> (at the bottom) will constrain the ";
SEARCH_GUIDE += "records to those which are descendants of the <b>Parent ";
SEARCH_GUIDE += "Transect</b>. If <b>Parent Transect ID</b> is left blank, it ";
SEARCH_GUIDE += "will not be used to constrain the search results.";

populateWebViewHtml("Control/Search/Parent_Transect_ID_Guide", SEARCH_GUIDE);

search(){
  String tabgroup = "Control";
  String refEntityList       = tabgroup + "/Search/Entity_List";
  String refSearchTerm       = tabgroup + "/Search/Search_Term";
  String refEntityTypes      = tabgroup + "/Search/Entity_Types";
  String refParentTransectID = tabgroup + "/Search/Parent_Transect_ID";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String parentTransectID = getFieldValue(refParentTransectID);

  if (!validateSearch(type, parentTransectID)) {
    return;
  }

  String searchQuery = "";
  searchQuery += " SELECT uuid, response";
  searchQuery += "  FROM latestNonDeletedArchEntFormattedIdentifiers";
  searchQuery += " WHERE uuid IN (SELECT uuid";
  searchQuery += "                  FROM latestNonDeletedArchEntIdentifiers";
  searchQuery += "                 WHERE measure LIKE '"+term+"'||'%'";
  searchQuery += "                   AND ( aenttypename LIKE '"+type+"' OR '' = '"+type+"' )";
  searchQuery += "                   AND ('' = '"+parentTransectID+"' OR";
  searchQuery += "                        uuid IN (SELECT uuid ";
  searchQuery += "                                   FROM latestnondeletedaentvalue ";
  searchQuery += "                                   JOIN attributekey using (attributeid)";
  searchQuery += "                                  WHERE attributename in ('Site Transect ID', 'Feature Transect ID')";
  searchQuery += "                                    AND measure = '"+parentTransectID+"'";
  searchQuery += "                                )";
  searchQuery += "                        )";
  searchQuery += "                )";
  searchQuery += " ORDER BY response";
  searchQuery += " LIMIT  ?";
  searchQuery += " OFFSET ?";

  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS(tabgroup);

  Log.d("Module", "Search query: " + searchQuery);
}

validateSearch(type, parentTransectID) {
  if (isNull(parentTransectID)) {
    return true;
  }

  List possibleChildTypes = new ArrayList();
  possibleChildTypes.add("");        // No constraint or "All"
  possibleChildTypes.add("Feature");
  possibleChildTypes.add("Site");

  // There can only be entites in the search results if the arch ent type
  // selected by the user is a child of a Transect.
  Boolean canShowResults = possibleChildTypes.contains(type);

  if (canShowResults) {
    return true;
  }

  msgHead  = "No Results Found";
  msgBody  = "No results have been found. This may be because Transects can ";
  msgBody += "only have Feature or Site records as their children. However, ";
  msgBody += "the list of results has been constrained to display only ";
  msgBody += "records whose entity type is " + type + ".";
  msgBody += "\n\n";
  msgBody += "Leaving the Parent Entity ID field blank, or setting the Entity ";
  msgBody += "Types dropdown menu to 'All', 'Feature' or 'Site' may yeild ";
  msgBody += "better results.";
  showWarning(msgHead, msgBody);

  return false;
}

/******************************************************************************/
/*                                    INIT                                    */
/*                                                                            */
/* Stuff which needs to be done last.                                         */
/******************************************************************************/
bindOnEvents();
